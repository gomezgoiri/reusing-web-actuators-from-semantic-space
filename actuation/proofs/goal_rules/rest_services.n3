@prefix : <http://example.org/light_scen#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix http: <http://www.w3.org/2011/http#>.
@prefix ssn: <http://www.w3.org/2005/Incubator/ssn/ssnx/ssn#>.
@prefix dbpedia: <http://dbpedia.org/resource/>.
@prefix dbpedia-owl: <http://dbpedia.org/ontology/>.
@prefix sweet: <http://sweet.jpl.nasa.gov/>.
@prefix ucum: <http://purl.oclc.org/NET/muo/ucum/>.
@prefix dul: <http://www.loa.istc.cnr.it/ontologies/DUL.owl#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix var: <http://localhost/var#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix r: <http://www.w3.org/2000/10/swap/reason#>.
@prefix n3: <http://www.w3.org/2004/06/rei#>.


# I don't know how to do it in 2 queries

#{ # Analogy: SPARQL WHERE
#  ?lemma a r:Inference ;
#	  r:rule ?rule ;
#	  r:binding ?binding .
#  ?rule r:gives ?gives . # sacarlo del because o parseando directamente el fichero?
#  ?binding r:variable ?blank_var .
#  ?blank_var ?pvar ?var .
#  ?binding r:boundTo ?blank_bound .
#  ?blank_bound ?pbound ?bound .
#}
#=>
#{ # Analogy: SPARQL CONSTRUCT
#  ?lemma r:gives ?gives .
#  r:var ?var ;
#  r:bound ?bound .
#}.


{ # Analogy: SPARQL WHERE
  ?lemma a r:Inference ;
	  r:rule ?rule .
  ?rule r:gives {
    ?expr => ?implication .
  }.
  
  ?implication log:includes {
  	?rest http:requestURI ?request_uri ;
  		  http:methodName ?method ;
  		  http:body ?body .
  } .
}
=>
{ # Analogy: SPARQL CONSTRUCT
  ?lemma http:request {
  	 ?expr => ?implication .
  	# Directly extracting it, the var:x0 is "blankized" to _:x0 (I don't know why :-S)
  	#?rest http:requestURI ?request_uri ;
  	#	  http:methodName ?method ;
  	#	  http:body ?body .
  } .
}.